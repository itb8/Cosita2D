//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Controles.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controles: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controles()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controles"",
    ""maps"": [
        {
            ""name"": ""Crab"",
            ""id"": ""2ee819a1-f2e2-4034-864b-cafc72850b2f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e933b8f5-6fde-47fe-a79f-7177196891f6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f2a15079-577c-4430-ae67-07dd710e7fd7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a503ded4-d4f2-483b-bb11-23ebe7976855"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e80555ad-8bb7-4933-8a23-f1b6706694b9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1831d8c-0708-460b-92d6-896e12080931"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""15f8d127-75a3-459b-8710-86ebb89a52d4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0c484f94-b4d1-4b35-ab88-b4eef888227a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""99880a34-a271-45c4-9d05-fcfa36cd3dee"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1be67d2a-15a1-4acd-91be-8f01eb7693a4"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""242c9141-37d0-4df9-991b-6e6904698237"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04e498ce-c46c-4877-8103-57f51ede1628"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Octopus"",
            ""id"": ""c60003c1-362d-44ff-a895-c0cf83088cf2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b83fb667-6944-4582-bde9-6a1a9c42b27c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""9e4eb165-b4e4-479c-bc0c-6600b9d2f505"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dd538998-c9c8-4f2e-bf35-fa0d58f5be21"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3a69d649-4f48-4f77-a71d-63326dd3dba6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""456d42c1-fd70-4122-9c9c-5d14c2af340e"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""504be0cf-4501-4880-9727-71c0d5340eb5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8071ceb7-4710-4a8b-9ca0-05c327c3ccd5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3f80f7e5-76b6-4b4a-ac2a-7439d5161b4a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1bf7ff2c-2c9f-46db-b039-cf9daabeab78"",
                    ""path"": ""<XInputController>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d77836fd-963a-487f-8e31-442d5450e681"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""991c6941-2c16-4a72-b25a-88d28eda93df"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Crab
        m_Crab = asset.FindActionMap("Crab", throwIfNotFound: true);
        m_Crab_Move = m_Crab.FindAction("Move", throwIfNotFound: true);
        m_Crab_Jump = m_Crab.FindAction("Jump", throwIfNotFound: true);
        m_Crab_Interact = m_Crab.FindAction("Interact", throwIfNotFound: true);
        // Octopus
        m_Octopus = asset.FindActionMap("Octopus", throwIfNotFound: true);
        m_Octopus_Move = m_Octopus.FindAction("Move", throwIfNotFound: true);
        m_Octopus_Interact = m_Octopus.FindAction("Interact", throwIfNotFound: true);
        m_Octopus_Jump = m_Octopus.FindAction("Jump", throwIfNotFound: true);
    }

    ~@Controles()
    {
        UnityEngine.Debug.Assert(!m_Crab.enabled, "This will cause a leak and performance issues, Controles.Crab.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Octopus.enabled, "This will cause a leak and performance issues, Controles.Octopus.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Crab
    private readonly InputActionMap m_Crab;
    private List<ICrabActions> m_CrabActionsCallbackInterfaces = new List<ICrabActions>();
    private readonly InputAction m_Crab_Move;
    private readonly InputAction m_Crab_Jump;
    private readonly InputAction m_Crab_Interact;
    public struct CrabActions
    {
        private @Controles m_Wrapper;
        public CrabActions(@Controles wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Crab_Move;
        public InputAction @Jump => m_Wrapper.m_Crab_Jump;
        public InputAction @Interact => m_Wrapper.m_Crab_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Crab; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CrabActions set) { return set.Get(); }
        public void AddCallbacks(ICrabActions instance)
        {
            if (instance == null || m_Wrapper.m_CrabActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CrabActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(ICrabActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(ICrabActions instance)
        {
            if (m_Wrapper.m_CrabActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICrabActions instance)
        {
            foreach (var item in m_Wrapper.m_CrabActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CrabActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CrabActions @Crab => new CrabActions(this);

    // Octopus
    private readonly InputActionMap m_Octopus;
    private List<IOctopusActions> m_OctopusActionsCallbackInterfaces = new List<IOctopusActions>();
    private readonly InputAction m_Octopus_Move;
    private readonly InputAction m_Octopus_Interact;
    private readonly InputAction m_Octopus_Jump;
    public struct OctopusActions
    {
        private @Controles m_Wrapper;
        public OctopusActions(@Controles wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Octopus_Move;
        public InputAction @Interact => m_Wrapper.m_Octopus_Interact;
        public InputAction @Jump => m_Wrapper.m_Octopus_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Octopus; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OctopusActions set) { return set.Get(); }
        public void AddCallbacks(IOctopusActions instance)
        {
            if (instance == null || m_Wrapper.m_OctopusActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OctopusActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IOctopusActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IOctopusActions instance)
        {
            if (m_Wrapper.m_OctopusActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOctopusActions instance)
        {
            foreach (var item in m_Wrapper.m_OctopusActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OctopusActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OctopusActions @Octopus => new OctopusActions(this);
    public interface ICrabActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IOctopusActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
